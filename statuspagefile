<!DOCTYPE html>
<html lang="en">
<head>
<script src="https://cdnjs.cloudflare.com/ajax/libs/d3/3.5.6/d3.min.js"></script>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="stylesheet" href="http://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/css/bootstrap.min.css">
  <link href="https://code.jquery.com/ui/jquery-ui-git.css" rel="stylesheet" type="text/css" />
<script src="https://code.jquery.com/jquery-git.js"></script>
<script src="https://code.jquery.com/ui/jquery-ui-git.js"></script>  
  </head>

 <style>
   body{
     background-color: #e7e8e9;
   }
  </style>

  
  
  
  <div style="position: absolute; top:5px; left:600px; width:10px; height:50px"><h1><p id="demo2"></p></h1>
  </div>
 
  <div style="position: absolute; top:80px; left:600px; width:10px; height:50px"><h1><p id="demo1"></p></h1>
  </div>
  
  <div style="position: absolute; top:150px; left:600px; width:10px; height:50px"><h1><p id="demo3"></p></h1>
  </div>
 
  <div style="position: absolute; top:10px; left:750px; width:10px; height:50px"><h1><p id="demo1"></p></h1>
  </div>
  
  <div style="position: absolute; top:80px; left:750px; width:10px; height:30px"><h1><p>Hrs</p></h1>
  </div>

  <div style="position: absolute; top:150px; left:750px; width:10px; height:30px"><h1><p>mAh</p></h1>
  </div>
    <div style="position: absolute; top:330px; left:245px; width:400px; height:40px"><h3><p>Stored Beam Current and Lifetime</p></h3>
  </div>
 





  <body>

  <script>  
 $.ajax({
            url: "http://arcapp01.cs.nsls2.local:17668/retrieval/data/getData.json?pv=lastSample_36000000(SR-OPS{}Mode-Sts)",
            dataType: 'json',
            success: function (value) {
    var aaa = (value[0].data[0].val); 
           console.log(aaa) 


  
  var M1S = aaa


//
      var green = "green"
      var yellow = "yellow"
      var blue = "#92D7FF"
      var red = "red"
      var purple = "purple"
      var grey = " #CCCCCC"
      var pink = "pink";
      var M10 = "Operation Mode: Opperations"
      var M11 = "Operation Mode: Setup"
      var M12 = "Operation Mode: Studies"
      var M13 = "Operation Mode: Failure"
      var M14 = "Operation Mode: Maintenance"
      var M15 = "Operation Mode: Shutdown"
      var M16 = "Operation Mode: Unscheduled Ops";

      
      

//varibles for changing the colors of the 2 display boxes



//
if (M1S == 0){
 color1 = green
 message1 = M10;
}
else if (M1S == 1){
  color1 = yellow
  message1 = M11;
}
  else if (M1S == 2){
  color1 = blue
  message1 = M12;
}
  else if (M1S == 3){
  color1 = red
  message1 = M13;
}
  else if (M1S == 4){
  color1 = purple
  message1 = M14;
}
  else if (M1S == 5){
  color1 = grey
  message1 = M54;
}
  else if (M1S == 6){
  color1 = pink
  message1 = M16;
}



//rules for displaing code and text inside of the status boxes



//

                            


  var rectangle1 = svgContainer1.append("rect")               .attr("x", 10)
        .attr("y", 10)                     .attr("width", 900)
        .attr("height", 80)
        .attr("stroke","black")
        .attr("stroke-width","3px")         .attr("fill", color1);

//container for the rectangle, and the actual rectangles 




//
var text = svgContainer1.append('text')
          .text(message1)
          .attr('x', 340)
          .attr('y', 55)
          .attr('fill', 'black')
          .attr('font-size', "20px");



//the actual text placed inside of the rectangle's svg container


              },

    });
  </script>

  <script>
  


setInterval(function() {
   
  $.ajax({
            url: "http://arcapp01.cs.nsls2.local:17668/retrieval/data/getData.json?pv=lastSample_36000000(SR:OPS-BI{DCCT:1}Lifetime-I)",
            dataType: 'json',
            success: function (value) {
    var BLV = (value[0].data[0].val); 
           console.log(BLV)
 
document.getElementById("demo1").innerHTML = Math.floor(BLV * 100)/100;

            
            },

    });

}, 5000);
  </script>
  

    <script>
    
    
    
setInterval(function() {
   
  $.ajax({
            url: "http://arcapp01.cs.nsls2.local:17668/retrieval/data/getData.json?pv=lastSample_36000000(SR:OPS-BI{DCCT:1}I:Real-I)",
            dataType: 'json',
            success: function (value) {
    var BCV = (value[0].data[0].val); 
           console.log(BCV)
 
document.getElementById("demo2").innerHTML = Math.floor(BCV * 100)/100;

            
            },

    });

}, 5000);
    
    
    
    
    
    
    
    
    
    </script>
    
    
    
    
    
   
    <script>
    
    
    
setInterval(function() {
   
  $.ajax({
            url: "http://arcapp01.cs.nsls2.local:17668/retrieval/data/getData.json?pv=lastSample_36000000(SR:C03-BI{DCCT:1}Dosage:1d-I_)",
            dataType: 'json',
            success: function (value) {
    var DAHV = (value[0].data[0].val); 
           console.log(DAHV)
 
document.getElementById("demo3").innerHTML = Math.floor(DAHV * 100)/100;

            
            },

    });

}, 5000);
    

 var svgContainer3 = d3.select("body").append("svg")
.attr("width",500)
.attr("height",220)
   .attr("fill", "white");
  
  


    












  
  
    
      

     
 
  
  

  
  
  
  //all of the dynamic varibles that effectivly change what is being represented on the web page
      
      
//


  var text3 = svgContainer3.append('text')
.attr('x',10)
.attr('y',50)
.text("Beam Current")
.attr('fill','black')
.attr("font-size", "35px")
.attr("font-weight", "bold");
  
  var text4 = svgContainer3.append('text') 
.attr('x',10)
.attr('y',125)
.text("Beam Lifetime")
.attr('fill','black')
.attr("font-size", "35px");

  var text5 = svgContainer3.append('text')
.attr('x',10)
.attr('y',200)
.text("Daily Amp Hours")
.attr('fill','black')
.attr("font-size", "35px");



  
    
  var text7 = svgContainer3.append('text')
.attr('x', 750)
.attr('y', 125)
.text(BCV)
.attr('fill','black')
.attr("font-size", "35px");
  
  
  
  
  
  var text8 = svgContainer3.append('text')
.attr('x', 750)
.attr('y', 200)
.text(DAHV)
.attr('fill','black')
.attr("font-size", "35px");
//the containers and values for the Beam Lifetime, Beam Current, and Daily Amp Hours



  
  </script>
 
  
  <script>
  
  
  
  
  setInterval(function() {
   
  $.ajax({
            url: "http://arcapp01.cs.nsls2.local:17668/retrieval/data/getData.json?pv=lastSample_36000000(SR-OPS{}Mode-Sts)",
            dataType: 'json',
            success: function (value) {
    var aaa = (value[0].data[0].val); 
           console.log(aaa)


  
  var M1S = aaa


//
      var green = "green"
      var yellow = "yellow"
      var blue = "#92D7FF"
      var red = "red"
      var purple = "purple"
      var grey = "#CCCCCC"
      var pink = "pink";
      var M10 = "Operation Mode: Opperations"
      var M11 = "Operation Mode: Setup"
      var M12 = "Operation Mode: Studies"
      var M13 = "Operation Mode: Failure"
      var M14 = "Operation Mode: Maintenance"
      var M15 = "Operation Mode: Shutdown"
      var M16 = "Operation Mode: Unscheduled Ops";

      
      

//varibles for changing the colors of the 2 display boxes



//
if (M1S == 0){
 color1 = green
 message1 = M10;
}
else if (M1S == 1){
  color1 = yellow
  message1 = M11;
}
  else if (M1S == 2){
  color1 = blue
  message1 = M12;
}
  else if (M1S == 3){
  color1 = red
  message1 = M13;
}
  else if (M1S == 4){
  color1 = purple
  message1 = M14;
}
  else if (M1S == 5){
  color1 = grey
  message1 = M14;
}
  else if (M1S == 6){
  color1 = pink
  message1 = M16;
}



//rules for displaing code and text inside of the status boxes



//

                            


  var rectangle1 = svgContainer1.append("rect")               .attr("x", 10)
        .attr("y", 10)                     .attr("width", 900)
        .attr("height",80)
        .attr("stroke","black")
        .attr("stroke-width","3px")         .attr("fill", color1);
                            


//container for the rectangle, and the actual rectangles 




//
var text = svgContainer1.append('text')
          .text(message1)
          .attr('x', 350)
          .attr('y', 55)
          .attr('fill', 'black')
          .attr('font-size', "20px");



//the actual text placed inside of the rectangle's svg container


              },

    });

}, 5000);

  var svgContainer1 = d3.select("body").append("svg")
         .attr("width", 920)    
         .attr("height", 95);

  </script>

<div class="container">
<head>
<script src="https://cdnjs.cloudflare.com/ajax/libs/d3/3.5.6/d3.min.js"></script>
<script src="https://code.jquery.com/jquery-git.js"></script>
  <style>
 

.line1 {
    fill: none;  
    stroke: blue;
    stroke-width: 1.5px;
}
.line2 {
    fill: none;
    stroke: #CC230F;
    stroke-width: 1.5px;
}
.yAxis2  {
    fill: none;
    stroke: #CC230F;
    stroke-width: .9px;
    shape-rendering: crispEdges;
}
.yAxis1  {
    fill: none;
    stroke: black;
    shape-rendering: crispEdges;
   stroke-width: .75px;
}
.xAxis  {
    fill: none;
    stroke: black;
    shape-rendering: crispEdges;
    stroke-width: .75px;
}

  </style>
  </head>
  <body>
<script>
var n = 1000,
    duration = 1000,
    now = new Date(Date.now() - duration),
    random = d3.random.normal(0, 0.2),
    count = 0,
    data1 = d3.range(n).map(random),
    data2 = d3.range(n).map(random);

var margin = {
    top: 20,
    right: 70,
    bottom: 20,
    left: 70
},
    width = 900 - margin.left - margin.right,
    height = 490 - margin.top - margin.bottom;

var x = d3.time.scale()
    .domain([now - (n - 2) * duration, now - duration])
    .range([0, width]);

var y1 = d3.scale.linear()
    .domain([0, 400])
    .range([height, 0]);

var y2 = d3.scale.linear()
    .domain([0, 30])
    .range([height, 0]);

var line1 = d3.svg.line()
    .interpolate("basis")
    .x(function (d, i) {
    return x(now - (n - 1 - i) * duration);
})
    .y(function (d, i) {
    return y1(d);
});


var line2 = d3.svg.line()
    .interpolate("basis")  
    .x(function (d, i) {
    return x(now - (n - 1 - i) * duration);
})
    .y(function (d, i) {
    return y2(d);
});











var svg = d3.select("body").append("svg")
    .attr("width", width + margin.left + margin.right)
    .attr("height", height + height)
    .append("g")
    .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

svg.append("defs").append("clipPath")
    .attr("id", "clip")
    .append("rect")
    .attr("width", width)
    .attr("height", height);

svg.append("text")    
        .attr("x", 400 )
        .attr("y",  500 )
        .style("text-anchor", "middle")
        .text("Time")
     .style("stroke", "black")   
  .style("stroke-width", ".5px")     
  .style("font-size", "15px")
  .attr("font-family", "sans-serif");


svg.append("text")    
        .attr("x", -230 )
        .attr("y", -50 )
        .style("text-anchor", "middle")
        .text("Current (Ma)")
   .style("stroke", "blue")   
.style("stroke-width", ".5px")
  .style("font-size", "15px")
        .attr("transform", "rotate(-90)")
.attr("font-family", "sans-serif");
       

svg.append("text")   
        .attr("x", -230 )
        .attr("y", 810 )
        .style("text-anchor", "middle")
        .text("Lifetime (Hr)")
   
  .style("stroke-width", ".5px")     
  .style("font-size", "15px")
        .attr("transform", "rotate(-90)")
  .style("stroke", "#CC230F")
.attr("font-family", "sans-serif");


       

       

var axis = svg.append("g")
    .attr("class", "xAxis")
 .style("font-size", "10px")
 .style("stroke", "black")
.style("stroke-width", ".75px")
.attr("font-family", "sans-serif")
.attr("transform", "translate(0," + height + ")")
    .call(x.axis = d3.svg.axis().scale(x).orient("bottom"));

var yAxis1 = svg.append("g")
 .style("font-size", "10px")
.style("stroke", "blue")
.style("stroke-width", ".75px")
.attr("font-family", "sans-serif")   
.attr("class", "yAxis1")
.call(y1.axis = d3.svg.axis().scale(y1).ticks(10).tickSize(10).tickSubdivide(50).tickPadding(10).orient("left"));
   
var y1Axis1 = svg.append("g")
 .style("font-size", "10px")
.style("stroke", "blue")
.style("stroke-width", ".75px")
.attr("font-family", "sans-serif")   
.attr("class", "yAxis1")
.call(y1.axis = d3.svg.axis().scale(y1).ticks(50).tickSize(5).tickFormat("").tickSubdivide(50).tickPadding(10).orient("left"));


var yAxis2 = svg.append("g")
 .style("font-size", "10px")
.style("stroke", "#CC230F")
.attr("font-family", "sans-serif")   
.attr("class", "yAxis2")
    .call(y2.axis = d3.svg.axis().scale(y2).ticks(10).tickSize(10).tickSubdivide(50).tickPadding(10).orient("right"))
    .attr('transform', 'translate(760, 0)');

var y2Axis2 = svg.append("g")
 .style("font-size", "10px")
.style("stroke", "#CC230F")
.style("stroke-width", ".75px")
.attr("font-family", "sans-serif")   
.attr("class", "yAxis2")
.call(y2.axis = d3.svg.axis().scale(y2).ticks(30).tickSize(5).tickFormat("").orient("right"))
.attr('transform', 'translate(760, 0)');

var path1 = svg.append("g")
    .attr("clip-path", "url(#clip)")
    .append("path")
    .datum(data1)
    .attr("class", "line1")


var path2 = svg.append("g")
    .attr("clip-path", "url(#clip)")
  
.append("path")
    .datum(data2)
    .attr("class", "line2");


var transition = d3.select({}).transition()
    .duration(10000)
    .ease("linear");


 
 
  tick();


setInterval(function() {
  
  $.ajax({
            url: "http://arcapp01.cs.nsls2.local:17668/retrieval/data/getData.json?pv=lastSample_36000000(SR:OPS-BI{DCCT:1}Lifetime-I)",
            dataType: 'json',
            success: function (value) {
    var abc = (value[0].data[0].val);
           console.log(abc)
 data2.push(abc);
           
           
           
            },

    });

}, 4000);   
          
setInterval(function() {
  
  $.ajax({
            url: "http://arcapp01.cs.nsls2.local:17668/retrieval/data/getData.json?pv=lastSample_36000000(SR:OPS-BI{DCCT:1}I:Real-I)",
            dataType: 'json',
            success: function (value) {
    var cde = (value[0].data[0].val);
           console.log(cde)

           data1.push(cde);
           
           
            },

    });

}, 4000);
 
 
  function tick() {
    transition = transition.each(function () {




 
          
            path1.attr("d", line1)
            .attr("transform", null);
            path1.transition()
            .attr("transform", "translate(" + x(now - (n - 1) * duration) + ")");
            data1.shift();


     
     

           path2.attr("d", line2)
           .attr("transform", null);     
           path2.transition()
           .attr("transform", "translate(" + x(now - (n - 1) * duration) + ")");
           data2.shift();
       
  
     
     
     
     
     
     
     
     


        // slide the x-axis left, rescale the y-axis
        axis.call(x.axis);
 

  

     

    }).transition().each("start", tick);




now = new Date();
        x.domain([now - (n - 2) * duration, now - duration]);
 
}
 

    </script>
    <div class="graph"></div>
  </body>


</body>
<body>
   
  <div style="position: absolute; top:870px; left:70px; width:700px; height:10px">

  <script type="text/javascript">
tday=new Array("Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday");
tmonth=new Array("January","February","March","April","May","June","July","August","September","October","November","December");

function GetClock(){
var d=new Date();
var nday=d.getDay(),nmonth=d.getMonth(),ndate=d.getDate(),nyear=d.getYear();
if(nyear<1000) nyear+=1900;
var nhour=d.getHours(),nmin=d.getMinutes(),nsec=d.getSeconds(),ap;

if(nhour==0){ap=" AM";nhour=12;}
else if(nhour<12){ap=" AM";}
else if(nhour==12){ap=" PM";}
else if(nhour>12){ap=" PM";nhour-=12;}

if(nmin<=9) nmin="0"+nmin;
if(nsec<=9) nsec="0"+nsec;

document.getElementById('clockbox').innerHTML=""+tday[nday]+", "+tmonth[nmonth]+" "+ndate+", "+nyear+" "+nhour+":"+nmin+":"+nsec+ap+"";
}

window.onload=function(){
GetClock();
setInterval(GetClock,1000);
}
</script>
<div id="clockbox"></div>
   </div>
    </body>
</html>
